Задача 1. Тема: Класс, объект, поля, свойства, методы, инкапсуляция, области видимости.
Местами уже наследование всплывает.

Для задач, которые не предполагают визуализацию, должен быть написан код,
демонстрирующий работу с классом и показывающий, что ваш код рабочий.
 
1. Дата (операции +/- n дней/месяцев/лет, сравнение дат, форматирование даты по шаблону, разбор даты из строки и т.п.).
   Дата внутри хранится в виде целого числа - кол-во дней с начала летоисчисления (01.01.0001).

2. Время (аналогичное дате).
   Время внутри хранится в виде целог

3. Дата + Время (реализация должна быть выполнена на основе 2-х предыдущих классов).

4. Светофор (содержит таймер, который переключает цвета, события изменения цвета,
   различные конфигурации светофора, демонстрация работы на форме.)

5. (*) Таблица данных (именованные столбцы, произвольное количество строк, добавление, удаление строк, столбцов, работа с ячейками и т.д.).
   Должен быть интерфейс (набор открытых методов и классов), позволяющий выполнить следующий код (идет работа с одной и той же ячейкой):
     table.column("column_name").cell(5).setValue("123");
     int value = table.row(5).cell("column_name").getValueAsInt("123");
     table.cell("column_name", 5).setValue(value + 1);  // параметрический полиморфизм
     table.cell(5, "column_name").setValue(value + 2);  // параметрический полиморфизм

6. (*) Формула (интерпретатор).
    Должна быть возможность работы с формулой таким образом:
      Formula f = new Formula();
      f.prepare("x*x +y");
      double v = f.execute(2, 5.7);
      и т.п.

7. Словарь (ключ - строка, значение - объект). Можно самый примитивный вариант на основе массива.

8. Динамический стек (собственная релизация на основе одно-связанного списка, не используя готовые классы, спросить у преподавателя как).

9. Динамическая очередь (собственная релизация на основе одно-связанного списка, не используя готовые классы, спросить у преподавателя как).

10. Класс, одновременно реализующий стек и очередь (собственная релизация на основе двух-связанного списка, не используя готовые классы, спросить у преподавателя как).

11. Описание интерфейса класса (должна быть предусмотрена генерация кода).
    Предполагает наличие классов для описания параметра и метода.

12. (*) Объектное представление текстового документа (секции, списки) с форматированием текста в plain text.
    Классы - Параграф, Стиль и Документ.
    У Стиля свойтва: отступы сверху, снизу, слева, справа, красная строка (измеряется в кол-ве строк или символов),
    выравнивание (влево/вправо/по центру/по ширине), признак списка (с номером или с маркером).
    Параграф наследуется от стиля, а также может иметь стиль (собственные параметры параграфа перекрывают параметры стиля).
    Кроме того, для параграфа может быть задан номер, с которого начинается нумерация.
    Документ - состоит из параграфов и может печатать/сохранять форматированный документ в текстовом виде.

13. Словарь ( ключ - объект, значение - объект/набор объектов }, 
    словарь, кроме стандартных, должен содержать методы: 
      - получить список ключей для заданного объекта, 
      - удалить заданный объект для любых значений ключа,
      - удалить заданный объект для заданного ключа.

14. (*) Геометрическая фигура на плоскости - многоугольник.
    Задается в виде набора точек (ограничена линиями, проведенными от точки [0] до [1], от [1] до [2] и так далее, последняя линия соединяет точку [n-1] c точкой [0].
Должны быть реализованы методы вычисления площади фигуры (легко найти алгоритм в интернете), периметра, перемещения фигуры, вычисления прямоугольника, описывающего данный многоугольник, а также масштабирования фигуры по вертикали и горизонтали относительно верха/низа/середины и левого края/правого/середины фигуры, а также отображения фигуры.
Для демонстрации работы реализовать отображение фигуры на форме.
Редактор многоуголника делать не требуется (можно задавать фигуру в коде или считывать из файла).
В идеале (часть задания, которую можно не выполнять) сделать метод сохранения фигуры в svg-формате.
Непонятные вам моменты по заданию уточниь у преподавателя.

15. Более простой вариант предыдущей задачи - все то же самое, но для прямоугольника.
Непонятные вам моменты по заданию уточниь у преподавателя.

16. Геометрическая фигура - звезда (вида https://ru.wikipedia.org/wiki/%D0%97%D0%B2%D0%B5%D0%B7%D0%B4%D0%B0_(%D0%B3%D0%B5%D0%BE%D0%BC%D0%B5%D1%82%D1%80%D0%B8%D1%8F)#/media/File:Etoile_%C3%A0_quatre_branches.svg)
Задается параметрами: координатами центра, внежним радиусом, внутренним радиусом и кол-вом "лучиков".
Реализовать методы: отображение, перемещение, массштабирование (см. задачу № 14).
В идеале (часть задания, которую можно не выполнять) сделать метод сохранения фигуры в svg-формате.

17. Описать класс для представления Тарифов на международную связь.
Данный класс хранит в себе список направлений в виде код (префикс) направления, название направления, цена минуты разговора.
Класс должен уметь загружать информацию из текстового файла заданного формата (проще всего csv), сохранять тарифы в такой же файл, иметь возможность добавления/удаления/модификации направления.
И самое главное, класс должен уметь считать стоимость звонка, заданного вызываемым номером и длительностью в секундах.
Для этого надо найти направление с самым длинным кодом (префиксом), подходящим к номеру, перевсети длительность звонка в минуты (с округлением вверх, звонки короче 6 секунд не тарифицируются).
Интерфейс для демонстрации может быть консольным.

18. Описать в виде класса калькулятор для расчета платежей по кредиту.
Кредит задается параметрами: сумма кредита, срок кредита в месяцах, фиксированная процентная ставка, способ погашения кредита (дифференцированные платежи / аннуитетные платежи). Класс должен позволять задать каждый их этих параметров, а также рассчитать сумму платежей в n-ый по счету месяц, а таже общую суммы платежей по кредиту.
Интерфейс может быть консольным.

19. Реализовать свой собственный упрощенный аналог класса BigDecimal.
Представлять большое число можно в виде массива/списка цифр.
Реализовать функции сложения, вычитания, умножения, целочисленного деления и остатка от деления.

20. Треугольник задается 3-мя точками.
    Реализовать методы нахождения площади, периметра, проверки принадлежности точки треугольнику.

21. Класс студент с оценками за каждый семестр.
    Реализовать методы вычисления средней оценки за семестр и за все время обучения.

22. Класс, реализующий алгоритм псевдослучайных чисел (Существующий Random не использовать).

23. Класс для представления чисел в проивольной системе счисления.

24. Класс, в котором хранятся 2 списка и реализованы методы вычисления:
    1) элементов, которые есть в 2-х списках одновременно
    2) элементы, которые есть только в первом списке
    3) элементы, которые есть только во втором списке

25. Класс, моделирующий солнечную систему.
    Добавляются планеты со скоростью и радиусом вращения и диаметром и это все визуализируется.
    За положение планет в заданный момент времени отвечает класс планеты.
    
26. Класс для хранения лабиринта.
    Должен быть реализован метод поиска путей в лабиринте.

**. Остальные задачи позже. Предложения принимаются.
